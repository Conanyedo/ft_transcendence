import React, { createContext, createRef, PureComponent, Fragment } from 'react';
import PropTypes from 'prop-types';
import { Transformation as Transformation$1, Util, Cloudinary } from 'cloudinary-core';

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var _excluded$2 = ["public_id"],
    _excluded2 = ["publicId"],
    _excluded3 = ["children"],
    _excluded4 = ["children", "accessibility", "placeholder"];
var camelCase$1 = Util.camelCase,
    withCamelCaseKeys = Util.withCamelCaseKeys,
    isEmpty = Util.isEmpty; // props passed to cloudinary-core but should not be rendered as dom attributes

var CLOUDINARY_REACT_PROPS = ['accessibility', 'breakpoints', 'dataSrc', 'placeholder', 'publicId', 'signature', 'authToken'];
/**
 * Convert common video file extensions to mime types
 * Most other common video file extensions have an identical mime type so do not need conversion.
 */

var VIDEO_MIME_TYPES = {
  flv: 'x-flv',
  '3gp': '3gpp',
  mov: 'quicktime',
  mpg: 'mpeg',
  avi: 'x-msvideo',
  wmv: 'x-ms-wmv',
  ogv: 'ogg'
};
/**
 * Convert common audio file extensions to mime types
 * Most other common audio file extensions have an identical mime type so do not need conversion.
 */

var AUDIO_MIME_TYPES = {
  m4a: 'mp4',
  wav: 'vnd.wav',
  m3u: 'x-mpegurl',
  mp3: 'mpeg',
  ogv: 'ogg',
  aif: 'x-aiff',
  aifc: 'x-aiff',
  aiff: 'x-aiff'
}; // props passed to cloudinary-core for dom elements attributes generation
// Map Cloudinary props from array to object for efficient lookup

var CLOUDINARY_PROPS = [].concat(Transformation$1.PARAM_NAMES, CLOUDINARY_REACT_PROPS).map(Util.camelCase).reduce(function (accumulator, cloudinaryPropName) {
  accumulator[cloudinaryPropName] = true;
  return accumulator;
}, {});
/**
 * Return object without null/undefined entries
 * @param {*} obj
 */

var nonEmpty = function nonEmpty(obj) {
  return Object.entries(obj).reduce(function (a, _ref) {
    var _extends2;

    var k = _ref[0],
        v = _ref[1];
    return v == null ? a : _extends({}, a, (_extends2 = {}, _extends2[k] = v, _extends2));
  }, {});
};
/**
 * Generated a configured Cloudinary object.
 * @param extendedProps React props combined with custom Cloudinary configuration options
 * @return {Cloudinary} configured using extendedProps
 */


var getConfiguredCloudinary = function getConfiguredCloudinary(extendedProps) {
  // eslint-disable-next-line camelcase
  var _nonEmpty = nonEmpty(extendedProps),
      ops = _objectWithoutPropertiesLoose(_nonEmpty, _excluded$2); // Remove null/undefined props


  var options = Util.withSnakeCaseKeys(ops);
  return Cloudinary["new"](options);
};

var getTag = function getTag(props, tagType) {
  var publicId = props.publicId,
      ops = _objectWithoutPropertiesLoose(props, _excluded2); // Remove null/undefined props


  var cld = getConfiguredCloudinary(ops);
  return cld[tagType + "Tag"](publicId, Util.withSnakeCaseKeys(ops));
};
/**
 * Get a new <img> tag initialized with given props
 * @param {*} props
 */


var getImageTag = function getImageTag(props) {
  return getTag(props, 'image');
};
/**
 * Cloudinary underlying JS library will handle responsive behavior
 * @param {HTMLImageElement} img
 * @param {object} options
 * @Return callback that when called, will remove the listener created by Cloudinary.responsive
 */


var makeElementResponsive = function makeElementResponsive(img, options) {
  var snakeCaseOptions = Util.withSnakeCaseKeys(options);
  var cld = getConfiguredCloudinary(snakeCaseOptions); // Initialize cloudinary with new props

  cld.cloudinary_update(img, snakeCaseOptions);
  return cld.responsive(snakeCaseOptions, false);
};
/**
 * Extracts cloudinaryProps and nonCloudinaryProps from given props
 *
 * @param props
 * @returns {{children: *, cloudinaryReactProps: {}, cloudinaryProps: {}, nonCloudinaryProps: {}}}
 */


var extractCloudinaryProps = function extractCloudinaryProps(_ref2) {
  var children = _ref2.children,
      props = _objectWithoutPropertiesLoose(_ref2, _excluded3);

  var result = {
    children: children,
    cloudinaryProps: {},
    nonCloudinaryProps: {},
    cloudinaryReactProps: {}
  };
  Object.keys(props).forEach(function (key) {
    var camelKey = Util.camelCase(key);
    var value = props[key]; // if valid and defined add to cloudinaryProps

    if (CLOUDINARY_PROPS[camelKey]) {
      if (props[key] !== undefined && props[key] !== null) {
        result.cloudinaryProps[camelKey] = value;
      }
    } else if (camelKey === 'includeOwnBody') {
      // cloudinary-react specific prop
      result.cloudinaryReactProps[camelKey] = value;
    } else {
      // not valid so add to nonCloudinaryProps
      result.nonCloudinaryProps[key] = value;
    }
  });
  return result;
};
/**
 * Check if given component is a Cloudinary Component with given displayName
 * @param component the component to check
 * @param displayName of wanted component
 * @return {boolean}
 */


var isCloudinaryComponent = function isCloudinaryComponent(component, displayName) {
  return !!( /*#__PURE__*/React.isValidElement(component) && component.type && component.type.displayName === displayName);
};
/**
 * Combine properties of all options to create an option Object that can be passed to Cloudinary methods.<br>
 *   `undefined` and `null` values are filtered out.
 * @protected
 * @returns {Object}
 * @param options one or more options objects
 */


var normalizeOptions = function normalizeOptions() {
  return [].slice.call(arguments).reduce(function (left, right) {
    Object.keys(right || {}).forEach(function (key) {
      var value = right[key];

      if (value !== null && value !== undefined) {
        left[key] = value;
      }
    });
    return left;
  }, {});
};

var getChildPlaceholder = function getChildPlaceholder(children) {
  var result = null;

  if (children) {
    result = React.Children.toArray(children).find(function (child) {
      return isCloudinaryComponent(child, 'CloudinaryPlaceholder');
    });
  }

  return result;
};

var getChildTransformations = function getChildTransformations(children) {
  var result = children ? React.Children.toArray(children).filter(function (child) {
    return isCloudinaryComponent(child, 'CloudinaryTransformation');
  }).map(function (child) {
    var options = normalizeOptions(child.props, child.context);
    var childOptions = getChildTransformations(child.props.children);

    if (childOptions) {
      options.transformation = childOptions;
    }

    return options;
  }) : [];
  return result.length ? result : null;
};
/**
 * Return a new object containing keys and values where keys are in the keys list
 * @param {object} source Object to copy values from
 * @param {string[]} [keys=[]] a list of keys
 * @returns {object} an object with copied values
 */


var only = function only(source, keys) {
  if (keys === void 0) {
    keys = [];
  }

  if (!source) {
    return source;
  }

  return keys.reduce(function (tr, key) {
    if (key in source) {
      tr[key] = source[key];
    }

    return tr;
  }, {});
};
/**
   * Create a React type definition object. All items are PropTypes.string or [string] or object or [object].
   * @param {Array} configParams a list of parameter names
   * @returns {Object}
   * @private
   */


var typesFrom = function typesFrom(configParams) {
  configParams = configParams || [];
  var types = {};

  for (var i = 0; i < configParams.length; i++) {
    var key = configParams[i];
    types[camelCase$1(key)] = PropTypes.any;
  }

  return types;
};
/**
 * Returns an object with all the transformation parameters based on the context and properties of this element
 * and any children.
 * @param extendedProps
 * @returns {object} a hash of transformation and configuration parameters
 * @protected
 */


var getTransformation = function getTransformation(extendedProps) {
  var children = extendedProps.children,
      accessibility = extendedProps.accessibility,
      placeholder = extendedProps.placeholder,
      rest = _objectWithoutPropertiesLoose(extendedProps, _excluded4);

  var ownTransformation = only(withCamelCaseKeys(rest), Transformation$1.methods) || {};
  var childrenOptions = getChildTransformations(children);

  if (!isEmpty(childrenOptions)) {
    ownTransformation.transformation = childrenOptions;
  } // Append placeholder and accessibility if exists


  var advancedTransformations = {
    accessibility: accessibility,
    placeholder: placeholder
  };
  Object.keys(advancedTransformations).filter(function (k) {
    return advancedTransformations[k];
  }).forEach(function (k) {
    ownTransformation[k] = advancedTransformations[k];
  });
  return ownTransformation;
};

var CloudinaryContextType = /*#__PURE__*/createContext();

var camelCase = Util.camelCase;
/**
 * A base component for Cloudinary components.
 * @protected
 */

var CloudinaryComponent = /*#__PURE__*/function (_PureComponent) {
  _inheritsLoose(CloudinaryComponent, _PureComponent);

  function CloudinaryComponent(_props, _context) {
    var _this;

    _this = _PureComponent.call(this, _props, _context) || this;

    _this.getContext = function () {
      return _this.context || {};
    };

    _this.onIntersect = function () {
      // eslint-disable-next-line react/no-unused-state
      _this.setState({
        isInView: true
      });
    };

    _this.getExtendedProps = function (props, context) {
      if (props === void 0) {
        props = _this.props;
      }

      if (context === void 0) {
        context = _this.getContext();
      }

      return normalizeOptions(context, props);
    };

    _this.attachRef = function (element) {
      var innerRef = _this.props.innerRef;
      _this.element.current = element;

      if (innerRef) {
        if (innerRef instanceof Function) {
          innerRef(element);
        } else {
          innerRef.current = element;
        }
      }
    };

    _this.element = /*#__PURE__*/createRef();
    return _this;
  }

  var _proto = CloudinaryComponent.prototype;

  _proto.render = function render() {
    return null;
  };

  return CloudinaryComponent;
}(PureComponent);

CloudinaryComponent.defaultProps = {
  innerRef: null,
  publicId: null
};
CloudinaryComponent.propTypes = _extends({}, typesFrom(Transformation$1.PARAM_NAMES.map(camelCase)), {
  innerRef: PropTypes.any,
  publicId: PropTypes.string
});
CloudinaryComponent.contextType = CloudinaryContextType;

/**
 * Provides a container for Cloudinary components. Any option set in CloudinaryContext will be passed to the children.
 *
 * @example
 *<CloudinaryContext cloudName="mycloud" dpr="auto">
 *    <!-- other tags -->
 *    <Image publicId={id}/>
 *</CloudinaryContext>
 *
 */

var CloudinaryContext = /*#__PURE__*/function (_CloudinaryComponent) {
  _inheritsLoose(CloudinaryContext, _CloudinaryComponent);

  function CloudinaryContext() {
    return _CloudinaryComponent.apply(this, arguments) || this;
  }

  var _proto = CloudinaryContext.prototype;

  _proto.render = function render() {
    var props = _extends({}, this.getContext(), this.props);

    var _extractCloudinaryPro = extractCloudinaryProps(props),
        children = _extractCloudinaryPro.children,
        cloudinaryProps = _extractCloudinaryPro.cloudinaryProps,
        nonCloudinaryProps = _extractCloudinaryPro.nonCloudinaryProps,
        cloudinaryReactProps = _extractCloudinaryPro.cloudinaryReactProps;

    return /*#__PURE__*/React.createElement(CloudinaryContextType.Provider, {
      value: cloudinaryProps
    }, cloudinaryReactProps.includeOwnBody ? children : /*#__PURE__*/React.createElement("div", nonCloudinaryProps, children));
  };

  return CloudinaryContext;
}(CloudinaryComponent);

CloudinaryContext.propTypes = _extends({}, CloudinaryComponent.propTypes, {
  includeOwnBody: PropTypes.bool
});
CloudinaryContext.defaultProps = {
  includeOwnBody: false
};

var _excluded$1 = ["children", "innerRef"];
var RESPONSIVE_OVERRIDE_WARNING = "\nWarning: passing a number value for width cancels the 'responsive' prop's effect on the image transformation.\nThe 'responsive' prop affects the image transformation only when width === 'auto'.\nPassing 'width=\"auto\" responsive' will affect the actual image width that is fetched from Cloudinary.\nThe 'responsive' prop causes the Image component to request an image which width is equal to the width of it's container.\nWhen passing 'width=\"auto\" responsive', you can set the <img> element width by passing a 'style' prop".trim();
/**
 * A component representing a Cloudinary served image
 */

var Image = /*#__PURE__*/function (_CloudinaryComponent) {
  _inheritsLoose(Image, _CloudinaryComponent);

  function Image(props, context) {
    var _this;

    _this = _CloudinaryComponent.call(this, props, context) || this;

    _this.isResponsive = function () {
      var _this$getExtendedProp = _this.getExtendedProps(),
          responsive = _this$getExtendedProp.responsive,
          width = _this$getExtendedProp.width;

      if (responsive && width !== 'auto') {
        console.warn(RESPONSIVE_OVERRIDE_WARNING);
      }

      return responsive && _this.element && _this.element.current;
    };

    _this.getOptions = function () {
      var extendedProps = _this.getExtendedProps();

      var _extendedProps$getTra = _extends({}, extendedProps, getTransformation(extendedProps)),
          options = _objectWithoutPropertiesLoose(_extendedProps$getTra, _excluded$1);

      if (!_this.shouldLazyLoad()) {
        delete options.loading;
      }

      return options;
    };

    _this.getAttributes = function (additionalOptions) {
      if (additionalOptions === void 0) {
        additionalOptions = {};
      }

      var _additionalOptions = additionalOptions,
          placeholder = _additionalOptions.placeholder;
      var options = extractCloudinaryProps(_extends({}, _this.getOptions(), additionalOptions));
      var cloudinaryProps = options.cloudinaryProps,
          nonCloudinaryProps = options.nonCloudinaryProps,
          cloudinaryReactProps = options.cloudinaryReactProps;
      var imageTag = getImageTag(_extends({}, cloudinaryProps, cloudinaryReactProps));
      var cloudinaryAttributes = Util.withCamelCaseKeys(imageTag.attributes()); // React requires camelCase instead of snake_case attributes

      var attributes = _extends({}, cloudinaryAttributes, nonCloudinaryProps); // We want to keep 'data-src' if it exists


      if (attributes.dataSrc) {
        attributes['data-src'] = attributes.dataSrc;
      } // Set placeholder Id


      if (placeholder && attributes.id) {
        attributes.id += '-cld-placeholder';
      } // Set data-src if lazy loading and not in view


      if (_this.shouldLazyLoad()) {
        attributes['data-src'] = attributes.dataSrc || attributes.src;
        delete attributes.src;
      } // Remove unneeded attributes,


      CLOUDINARY_REACT_PROPS.forEach(function (attr) {
        delete attributes[attr];
      });
      return attributes;
    };

    _this.update = function () {
      // Handle lazy loading
      if (_this.shouldLazyLoad()) {
        // Will set this.state.isInView = true when in view
        Util.detectIntersection(_this.element.current, _this.onIntersect);
      } else if (_this.isResponsive()) {
        var options = _this.getOptions();

        var placeholder = _this.getPlaceholderType(); // Make placeholder responsive


        if (placeholder) {
          var removePlaceholderListener = makeElementResponsive(_this.placeholderElement.current, _extends({}, options, {
            placeholder: placeholder
          }));

          _this.listenerRemovers.push(removePlaceholderListener);
        } // Make original image responsive


        var removeImgListener = makeElementResponsive(_this.element.current, options);

        _this.listenerRemovers.push(removeImgListener);
      }
    };

    _this.shouldLazyLoad = function () {
      var _this$getExtendedProp2 = _this.getExtendedProps(),
          loading = _this$getExtendedProp2.loading;

      var isInView = _this.state.isInView;
      return !isInView && (loading === 'lazy' || loading === 'auto');
    };

    _this.handleImageLoaded = function () {
      var onLoad = _this.props.onLoad;

      _this.setState({
        isLoaded: true
      }, function () {
        if (onLoad) {
          onLoad();
        }
      });
    };

    _this.renderPlaceholder = function (placeholder, attributes) {
      attributes.style = _extends({}, attributes.style || {}, {
        opacity: 0,
        position: 'absolute'
      });
      attributes.onLoad = _this.handleImageLoaded;
      var placeholderWrapperStyle = {
        display: 'inline'
      };

      var placeholderAttributes = _this.getAttributes({
        placeholder: placeholder
      });

      return /*#__PURE__*/React.createElement(Fragment, null, _this.renderImage(attributes), /*#__PURE__*/React.createElement("div", {
        style: placeholderWrapperStyle
      }, /*#__PURE__*/React.createElement("img", _extends({
        ref: _this.placeholderElement
      }, placeholderAttributes))));
    };

    _this.renderImage = function (attributes) {
      return /*#__PURE__*/React.createElement("img", _extends({
        ref: _this.attachRef
      }, attributes));
    };

    _this.getPlaceholderType = function () {
      var _this$getExtendedProp3 = _this.getExtendedProps(),
          children = _this$getExtendedProp3.children;

      var placeholder = getChildPlaceholder(children);
      return placeholder ? placeholder.props.type : null;
    };

    _this.placeholderElement = /*#__PURE__*/createRef();
    _this.state = {
      isLoaded: false
    };
    _this.listenerRemovers = [];
    return _this;
  }
  /**
   * @return true when this image element should be made responsive, false otherwise.
   */


  var _proto = Image.prototype;

  /**
   * Invoked immediately after a component is mounted (inserted into the tree)
   */
  _proto.componentDidMount = function componentDidMount() {
    this.update();
  }
  /**
   * Invoked immediately after updating occurs. This method is not called for the initial render.
   */
  ;

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.update();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.listenerRemovers.forEach(function (removeListener) {
      return removeListener();
    });
  }
  /**
   * Updates this Image's isLoaded state,
   * And fires props.onLoad if exists.
   */
  ;

  _proto.render = function render() {
    var isLoaded = this.state.isLoaded;
    var attributes = this.getAttributes();
    var placeholder = this.getPlaceholderType(); // If image wasn't loaded and there's a child placeholder then we render it.

    if (!isLoaded && placeholder) {
      return this.renderPlaceholder(placeholder, attributes);
    }

    return this.renderImage(attributes);
  };

  return Image;
}(CloudinaryComponent);

Image.defaultProps = {};
Image.propTypes = CloudinaryComponent.propTypes;
Image.propTypes.responsive = PropTypes.bool;
Image.propTypes.loading = PropTypes.string;
Image.propTypes.accessibility = PropTypes.string;

/**
 * Define a transformation that is applied to the parent tag.
 */

var Transformation = /*#__PURE__*/function (_CloudinaryComponent) {
  _inheritsLoose(Transformation, _CloudinaryComponent);

  function Transformation() {
    return _CloudinaryComponent.apply(this, arguments) || this;
  }

  var _proto = Transformation.prototype;

  _proto.render = function render() {
    return null;
  };

  return Transformation;
}(CloudinaryComponent);

Transformation.propTypes = CloudinaryComponent.propTypes;
Transformation.defaultProps = {};
Transformation.exposesProps = true;
Transformation.displayName = 'CloudinaryTransformation';

var _excluded = ["innerRef", "publicId", "fallback", "children", "sourceTypes", "sourceTransformation", "sources"];
/**
 * A component representing a Cloudinary served video
 */

var Video = /*#__PURE__*/function (_CloudinaryComponent) {
  _inheritsLoose(Video, _CloudinaryComponent);

  function Video() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _CloudinaryComponent.call.apply(_CloudinaryComponent, [this].concat(args)) || this;
    _this.mimeType = 'video';
    _this.mimeSubTypes = VIDEO_MIME_TYPES;

    _this.getMergedProps = function () {
      return _extends({}, _this.getContext(), _this.props);
    };

    _this.generateVideoUrl = function (cld, publicId, childTransformations, sourceTransformations, sourceType) {
      var urlOptions = Util.withSnakeCaseKeys(Util.defaults({}, sourceTransformations, childTransformations, {
        resource_type: 'video',
        format: sourceType
      }));
      return cld.url(publicId, urlOptions);
    };

    _this.generateUsingSourceTypes = function (cld, publicId, childTransformations, sourceTransformations, sourceTypes) {
      return sourceTypes.map(function (sourceType) {
        return _this.toSourceTag(cld, publicId, childTransformations, sourceTransformations[sourceType] || {}, sourceType, _this.buildMimeType(sourceType));
      });
    };

    _this.generateUsingSources = function (cld, publicId, childTransformations, sources) {
      return sources.map(function (_ref) {
        var _ref$transformations = _ref.transformations,
            transformations = _ref$transformations === void 0 ? {} : _ref$transformations,
            type = _ref.type,
            codecs = _ref.codecs;
        return _this.toSourceTag(cld, publicId, childTransformations, transformations, type, _this.buildMimeType(type, codecs));
      });
    };

    _this.toSourceTag = function (cld, publicId, childTransformations, transformations, sourceType, mimeType) {
      var src = _this.generateVideoUrl(cld, publicId, childTransformations, transformations, sourceType);

      return /*#__PURE__*/React.createElement("source", {
        key: src + mimeType,
        src: src,
        type: mimeType
      });
    };

    _this.buildMimeType = function (type, codecs) {
      var mimeType = _this.mimeType + "/" + (_this.mimeSubTypes[type] || type);

      if (!Util.isEmpty(codecs)) {
        mimeType += "; codecs=" + (Util.isArray(codecs) ? codecs.join(', ') : codecs);
      }

      return mimeType;
    };

    _this.getVideoTagProps = function () {
      var _this$getMergedProps = _this.getMergedProps(),
          publicId = _this$getMergedProps.publicId,
          children = _this$getMergedProps.children,
          sourceTypes = _this$getMergedProps.sourceTypes,
          _this$getMergedProps$ = _this$getMergedProps.sourceTransformation,
          sourceTransformation = _this$getMergedProps$ === void 0 ? {} : _this$getMergedProps$,
          sources = _this$getMergedProps.sources,
          options = _objectWithoutPropertiesLoose(_this$getMergedProps, _excluded);

      options = normalizeOptions(options, {});

      var _extractCloudinaryPro = extractCloudinaryProps(options),
          cloudinaryProps = _extractCloudinaryPro.cloudinaryProps,
          cloudinaryReactProps = _extractCloudinaryPro.cloudinaryReactProps,
          nonCloudinaryProps = _extractCloudinaryPro.nonCloudinaryProps;

      options = _extends({}, cloudinaryProps, cloudinaryReactProps); // const snakeCaseOptions = toSnakeCaseKeys(options);

      var snakeCaseOptions = Util.withSnakeCaseKeys(options);
      var cld = Cloudinary["new"](snakeCaseOptions); // Use cloudinary-core to generate this video tag's attributes

      var tagAttributes = cld.videoTag(publicId, options).attributes();
      tagAttributes = _extends({}, Util.withCamelCaseKeys(tagAttributes), nonCloudinaryProps); // Aggregate child transformations, used for generating <source> tags for this video element

      var childTransformations = getTransformation(_extends({}, options, {
        children: children
      }));
      var sourceElements = null;

      if (Util.isArray(sources) && !Util.isEmpty(sources)) {
        sourceElements = _this.generateUsingSources(cld, publicId, childTransformations, sources);
      } else if (Util.isArray(sourceTypes)) {
        // We have multiple sourceTypes, so we generate <source> tags.
        sourceElements = _this.generateUsingSourceTypes(cld, publicId, childTransformations, sourceTransformation, sourceTypes);
      } else {
        // We have a single source type so we generate the src attribute of this video element.
        tagAttributes.src = _this.generateVideoUrl(cld, publicId, childTransformations, sourceTransformation[sourceTypes] || {}, sourceTypes);
      }

      return {
        sources: sourceElements,
        tagAttributes: tagAttributes
      };
    };

    _this.reloadVideo = function () {
      if (_this.element && _this.element.current) {
        _this.element.current.load();
      }
    };

    return _this;
  }

  var _proto = Video.prototype;

  _proto.componentDidUpdate = function componentDidUpdate() {
    // Load video on props change
    this.reloadVideo();
  }
  /**
   * Render a video element
   */
  ;

  _proto.render = function render() {
    var _this$props = this.props,
        fallback = _this$props.fallback,
        children = _this$props.children;

    var _this$getVideoTagProp = this.getVideoTagProps(),
        tagAttributes = _this$getVideoTagProp.tagAttributes,
        sources = _this$getVideoTagProp.sources;

    return /*#__PURE__*/React.createElement("video", _extends({
      ref: this.attachRef
    }, tagAttributes), sources, fallback, children);
  };

  return Video;
}(CloudinaryComponent);

Video.propTypes = {
  publicId: PropTypes.string,
  sources: PropTypes.arrayOf(PropTypes.shape({
    type: PropTypes.string,
    codecs: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),
    transformations: PropTypes.object
  }))
};
Video.defaultProps = {
  sourceTypes: Cloudinary.DEFAULT_VIDEO_PARAMS.source_types
};

/**
 * A component representing a Cloudinary served audio
 * This component extends the Video component and replaces it's render function.
 * Audio files are uploaded to Cloudinary as a video asset type.
 * An <audio> tag with a video source, will play the audio only.
 */

var Audio = /*#__PURE__*/function (_Video) {
  _inheritsLoose(Audio, _Video);

  function Audio() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Video.call.apply(_Video, [this].concat(args)) || this;
    _this.mimeType = 'audio';
    _this.mimeSubTypes = AUDIO_MIME_TYPES;
    return _this;
  }

  var _proto = Audio.prototype;

  /**
   * Render an audio element
   */
  _proto.render = function render() {
    var _this$props = this.props,
        innerRef = _this$props.innerRef,
        fallback = _this$props.fallback,
        children = _this$props.children;

    var _this$getVideoTagProp = this.getVideoTagProps(),
        tagAttributes = _this$getVideoTagProp.tagAttributes,
        sources = _this$getVideoTagProp.sources; // We generated video attributes, lets delete the unneeded poster


    delete tagAttributes.poster;
    return /*#__PURE__*/React.createElement("audio", _extends({
      ref: innerRef
    }, tagAttributes), sources, fallback, children);
  };

  return Audio;
}(Video);

Audio.propTypes = {
  publicId: PropTypes.string
};
Audio.defaultProps = {
  sourceTypes: ['aac', 'mp3', 'ogg']
};

// eslint-disable-next-line no-unused-vars
/**
 * Placeholder used by parent Image component, renders nothing on it's own.
 * @param type - type of placeholder 'blur'|'pixelate'|'predominant-color'|'vectorize',
 * @return {null}
 * @constructor
 */
// eslint-disable-next-line no-unused-vars

var Placeholder = function Placeholder(_ref) {
  return null;
};

Placeholder.propTypes = {
  type: PropTypes.string
};
Placeholder.defaultProps = {
  type: 'blur'
};
Placeholder.displayName = 'CloudinaryPlaceholder';

export { Audio, CloudinaryContext, Image, Placeholder, Transformation, Video };
